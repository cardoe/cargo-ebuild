extern crate cargo;
extern crate time;
#[macro_use]
extern crate structopt;

mod cargo_utils;
pub mod ebuild;

use cargo::Config;
use cargo::util::errors::CliError;

use cargo_utils::*;
use ebuild::*;

/// This is autogenerated for the cli interface, should be in the main.rs
/// but for now is easier to keep here.
#[derive(StructOpt, Debug)]
#[structopt(name = "cargo ebuild")]
pub struct Opt {
    /// Verbose mode (-v, -vv, -vvv, etc.)
    #[structopt(short = "v", long = "verbose", parse(from_occurrences))]
    pub verbose: u32,

    /// No output printed to stdout
    #[structopt(short = "q", long = "quiet")]
    pub quiet: bool,

    /// Arguments passed to cargo
    #[structopt(short = "f", long = "unstable-flags", parse(from_str))]
    pub unstable_flags: Vec<String>,
}


/// Quite huge all-in-one func that generates and Ebuild from some cli
/// cli configuration
pub fn ebuild_from_cargo(options: Opt) -> Result<Ebuild, CliError> {

    let mut config = Config::default().unwrap();

    config.configure(
        options.verbose,
        Some(options.quiet),
        // color
        &None,
        // frozen
        false,
        // locked
        false,
        // unstable flag
        &options.unstable_flags,
    )?;

    // Load the workspace and current package
    let workspace = workspace(&config)?;
    let package = workspace.current()?;

    // Resolve all dependencies (generate or use Cargo.lock as necessary)
    let mut registry = registry(&config, &package)?;
    let resolve = resolve(&mut registry, &workspace)?;

    // build the crates the package needs
    let mut crates = resolve
        .1
        .iter()
        .map(|pkg| format!("{}-{}\n", pkg.name(), pkg.version()))
        .collect::<Vec<String>>();

    // sort the crates
    crates.sort();

    // root package metadata
    let metadata = package.manifest().metadata();

    // package description
    let desc = metadata.description.as_ref().cloned().unwrap();
    // TODO: now package.name is InternedString
    // .unwrap_or_else(|| String::from(package.name()));

    // package version
    let version = package.manifest().version().to_string();

    // package homepage
    let homepage = metadata.homepage.as_ref().cloned().unwrap_or(
        metadata
            .repository
            .as_ref()
            .cloned()
            .unwrap_or_else(|| String::from("")),
    );

    let license = metadata
        .license
        .as_ref()
        .cloned()
        .unwrap_or_else(|| String::from("unknown license"));

    // write the contents out
    Ok( Ebuild::new (
            &package.name().to_string(),
            desc.trim(),
            homepage.trim(),
            license.trim(),
            &crates.join(""),
            &version,
            "cargo-ebuild".as_ref(),
            env!("CARGO_PKG_VERSION"),
            1900 + time::now().tm_year,
        )
    )
}
